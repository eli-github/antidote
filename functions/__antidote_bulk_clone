#!/bin/zsh

### Generate background clone commands
#function __antidote_bulk_clone {
  emulate -L zsh; setopt local_options $_adote_funcopts

  local -a bundles=("${(@f)$(__antidote_collect_input "$@")}")
  (( $#bundles )) || return 1

  local bundle parsed_bundle_str bundle_type
  local -aU script
  local -a script_opts
  local -A parsed_bundle

  # Allow the user to define zsh-defer repo in case they want to fork it.
  local zsh_defer_bundle
  zstyle -s ':antidote:defer' bundle 'zsh_defer_bundle' \
    || zsh_defer_bundle='romkatv/zsh-defer'

  for bundle in $bundles; do
    parsed_bundle_str=$(__antidote_parse_bundle "$bundle")
    [[ -n "$parsed_bundle_str" ]] || continue
    if [[ ! "$parsed_bundle_str" =~ '^typeset\ -A\ parsed_bundle=' ]]; then
      print -ru2 -- "antidote: Unable to parse bundle: '$bundle'."
      return 1
    fi

    # Turn the typeset string into an assocarr
    eval "$parsed_bundle_str"

    [[ -n "$parsed_bundle[name]" ]] || continue
    bundle_type="$(__antidote_bundle_type ${parsed_bundle[name]})"

    # we only clone repo bundles
    [[ "$bundle_type" == (repo|url|sshurl) ]] || continue

    script_opts=(--kind clone)

    # Clone zsh-defer if needed by the bundle
    if [[ "$parsed_bundle[kind]" == "defer" ]]; then
      script+=("__antidote_legacy_scripter $script_opts $zsh_defer_bundle &")
    fi

    # Add branch to script options
    if [[ -v parsed_bundle[branch] ]]; then
      script_opts+=(--branch $parsed_bundle[branch])
    fi
    #script+=("$parsed_bundle_str")
    script+=("__antidote_legacy_scripter $script_opts ${parsed_bundle[name]} &")
  done

  if (( $#script )); then
    script+=("wait")
    printf '%s\n' ${(o)script[@]}
  fi
#}
