#!/bin/zsh

### Generate clone commands that run in the background
#function __antidote_cloner {
  emulate -L zsh; setopt local_options $_adote_funcopts

  # Declare vars
  local bundle_str bundle_repr zsh_defer_str zsh_defer_bundle_repr err
  local -a bundles cloning
  local -aU clone_cmds
  local -A bundle zsh_defer_bundle

  # get piped/passed bundles
  bundles=( "${(@f)$(__antidote_argcollector "$@")}" )
  (( $#bundles )) || return 1

  # Allow the user to define zsh-defer repo in case they want to fork it.
  zstyle -s ':antidote:defer' bundle 'zsh_defer_str' \
    || zsh_defer_str='romkatv/zsh-defer'
  zsh_defer_bundle_repr=$(__antidote_parser "$zsh_defer_str" "zsh_defer_bundle")
  eval "$zsh_defer_bundle_repr"

  # Loop through the bundles and parse them into an assoc_arr. Use that to determine
  # which repos need cloned, and generate the script to clone them
  for bundle_str in $bundles; do
    bundle_repr=$(__antidote_parser "$bundle_str")
    err=$?
    [[ -n "$bundle_repr" ]] && [[ $err -eq 0 ]] || continue

    # Turn the typeset bundle_repr into the bundle assoc_arr
    eval "$bundle_repr"

    # Clone zsh-defer if needed by the bundle
    if [[ "$bundle[kind]" == "defer" ]]; then
      if [[ ! -d $zsh_defer_bundle[_repodir] ]] && ! (( $cloning[(Ie)$zsh_defer_bundle[_repo]] )); then
        cloning+=( $zsh_defer_bundle[_repo] )
        clone_cmds+=( "${(@f)$(__antidote_clone_cmd $zsh_defer_bundle[_repo] $zsh_defer_bundle[_url] $zsh_defer_bundle[_repodir])}" )
      fi
    fi

    # Check if the bundle is a proper repo.
    [[ -n "$bundle[_repo]" ]] || continue
    [[ "$bundle[_type]" == (repo|url) ]] || continue

    # Clone the bundle if needed.
    if [[ ! -d $bundle[_dir] ]] && ! (( $cloning[(Ie)$bundle[_repo]] )); then
      cloning+=( $bundle[_repo] )
      clone_cmds+=( "${(@f)$(__antidote_clone_cmd $bundle[_repo] $bundle[_url] $bundle[_repodir] $bundle[branch])}" )
    fi
  done

  if (( $#clone_cmds )); then
    print -r -- '() {'
    print -r -- '  emulate -L zsh; setopt local_options no_monitor pipefail'
    print -r -- '  local ANTIDOTE_HOME="'$(antidote-home)'"'
    printf '  %s\n' ${clone_cmds[@]}
    print -r -- '}'
    print -r -- 'wait'
  fi
#}
