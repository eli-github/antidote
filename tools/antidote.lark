// Define antidote DSL grammar

// -------- Top Level --------
file: (_line)* statement? -> file

_line: statement NEWLINE
     | NEWLINE

statement: comment
         | entry

comment: /[ \t]*#[^\r\n]*/

// -------- Entries --------
entry: WS? primary (WS attribute)* (WS extra_token)* (WS inline_comment)? -> entry

inline_comment: /#[^\r\n]*/

// -------- Primary Token --------
primary: URL       -> url
       | SLUG      -> slug
       | PATH      -> path
       | VALUEWORD -> loneword

// -------- Attributes --------
attribute: key ":" value -> attribute

// Support bare, double-quoted, and single-quoted keys.
key: BAREKEY
   | STRING
   | SSTRING

// Support double or single quoted values, or VALUEWORD.
value: STRING
     | SSTRING
     | VALUEWORD

extra_token: STRING
           | SSTRING
           | VALUEWORD

// -------- Terminals --------
//
// STRING / SSTRING support escapes for the respective quote and backslash.
//
STRING: /"([^"\\]|\\.)*"/
SSTRING: /'([^'\\]|\\.)*'/

URL: /(https?:\/\/[^\s#"]+)/
SLUG: /[A-Za-z0-9._-]+\/[A-Za-z0-9._-]+/
PATH: /\$[A-Za-z0-9_\/.$-]+/
BAREKEY: /[A-Za-z_][A-Za-z0-9_.-]*/

// Exclude both double and single quotes so quoted tokens are distinct.
// Allow ':' within VALUEWORD so values like is:this work.
VALUEWORD: /[^ \t\n"'#]+/

WS: /[ \t]+/
NEWLINE: /\r\n|\n|\r/

%ignore /[ \t]+(?=#)/
%ignore /[ \t]+(?=\r?\n)/
